; Archivo:     lab06_FINAAAAL.S
; Dispositivo: PIC166F887
; Autor:       Alba Rodas
; Compilador:  pic-as (v2.30), MPLABX V5.40
; Programa:    Contador binario de 8bits + 3 DISPLAY 7 SEGMENTOS --> UNIDADES, DECENAS, CENTENAS
; Hardware:    PIC, LEDs, PUSH-BUTTON, RESISTENCIAS, 7-SEG.
; Creado: 20 feb, 2022
; Última modificación: 26 feb, 2022
    
PROCESSOR 16F887
#include <xc.inc>

;configuration word 1
  CONFIG  FOSC = INTRC_NOCLKOUT ; Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
  CONFIG  WDTE = OFF            ; Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
  CONFIG  PWRTE = ON            ; Power-up Timer Enable bit (PWRT enabled)
  CONFIG  MCLRE = OFF           ; RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
  CONFIG  CP = OFF              ; Code Protection bit (Program memory code protection is disabled)
  CONFIG  CPD = OFF             ; Data Code Protection bit (Data memory code protection is disabled)
  CONFIG  BOREN = OFF           ; Brown Out Reset Selection bits (BOR disabled)
  CONFIG  IESO = OFF            ; Internal External Switchover bit (Internal/External Switchover mode is disabled)
  CONFIG  FCMEN = OFF           ; Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
  CONFIG  LVP = ON              ; Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

;configuration word 2
  CONFIG  BOR4V = BOR40V        ; Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
  CONFIG  WRT = OFF             ; Flash Program Memory Self Write Enable bits (Write protection off)
  
#include <xc.inc>

; --------------CONFIGURACION DE MACROS--------------- 
  RESET_TMR0 MACRO TMR_VAR
    BANKSEL TMR0	    ; Nos cambiamos de banco al del TMR0
    MOVLW   TMR_VAR
    MOVWF   TMR0	    ; Hacemos la configuración del 'delay'
    BCF	    T0IF	    ; Limpio las flags de interrupcion.
    ENDM		    ; FIN DEL MACRO
  
; -------VARIABLES A UTILIZAR (COMMOM MEMORY)--------
PSECT udata_shr		    ; udata_shr --> SHARED MEMORY
    W_TEMP:	    DS 1	; VARIABLES INCLUIDAS EN EL MANUAL DEL PIC PARA INTERRUPCIONES
    STATUS_TEMP:    DS 1
    
PSECT udata_bank0
    valor:	    DS 1	; AQUÍ GUARDO LOS VALORES QUE SE DEBEN MOSTRAR EN LOS DISPLAY
    centena:	    DS 1	; AQUÍ GUARDO LAS CENTENAS DE MI VARIABLE 'VALOR'
    decena:	    DS 1	; AQUÍ GUARDO LAS DECENAS DE MI VARIABLE 'VALOR'
    unidad:	    DS 1	; AQUÍ GUARDO LAS UNIDADES DE MI VARIABLE 'VALOR'
    flags:	    DS 1	; POR MEDIO DE 'FLAGS' DEFINO QUE VARIABLE MOSTRAR
    display_nrep:   DS 3	; MUESTRO LOS NIBLES DE 'display_nrep' DEL DISPLAY  
    
PSECT resVect, class=CODE, abs, delta=2
ORG 00h			    ; DEFINO POSICION 0000h para el VECTOR DE RESET
;------------VECTOR RESET--------------
resetVec:
    PAGESEL MAIN		; ME DIRIJO AL MAIN
    GOTO    MAIN
    
PSECT intVect, class=CODE, abs, delta=2
ORG 04h				; DEFINO POSICION 0004h PARA LAS INTERRUPCIONES

/*values:
    CLRF    PCLATH		; LIMPIO EL REGISTRO DE 'PCLATH'
    BSF	    PCLATH, 1		; PCLATH = LO HAGO = 01	; PCL = LO HAGO = 02
    ANDLW   0x0F		; LE INDICO QUE NO SE DEBEN SALTAR MÁS DE LOS VALORES PRESENTES EN 'VALUES'
    ADDWF   PCL			; PC = PCLATH + PCL + w
    RETLW   00111111B	; VALOR = 0
    RETLW   00000110B	; VALOR = 1
    RETLW   01011011B	; VALOR = 2
    RETLW   01001111B	; VALOR = 3
    RETLW   01100110B	; VALOR = 4
    RETLW   01101101B	; VALOR = 5
    RETLW   01111101B	; VALOR = 6
    RETLW   00000111B	; VALOR = 7
    RETLW   01111111B	; VALOR = 8
    RETLW   01101111B	; VALOR = 9
    RETLW   01110111B	; VALOR = A
    RETLW   01111100B	; VALOR = b
    RETLW   00111001B	; VALOR = C
    RETLW   01011110B	; VALOR = d
    RETLW   01111001B	; VALOR = E
    RETLW   01110001B	; VALOR = F
	*/
;-------RUTINA DE INTERRUPCION----------
PUSH:
    MOVWF   W_TEMP		; Copio W al registro 'TEMP'
    SWAPF   STATUS, W		; Swap status, se guarda en W.
    MOVWF   STATUS_TEMP		; Guardo el STATUS en el banco 00 del STATUS_TEMP register.
    
ISR:
    BTFSC   T0IF		; BIT TEST PARA INTERRUPCIONES --> EN CERO SI HUBIERON, EN UNO NO. (BINARY VALUE)
    CALL    INTERRUPTION_TMR0	; SI EL BIT TEST = 1, SE SIGUE CON LA SUBRUTINA DE INTERRUPCION DEL TMR0.
    BTFSC   RBIF		; BIT TEST PARA INTERRUPCIONES EN PORTB --> EN CERO SI HUBIERON, EN UNO NO. (BINARY VALUE)
    CALL    INTERRUPTION_PORTB	; SI EL BIT TEST = 1, SE SIGUE CON LA SUBRUTINA DE INTERRUPCION DEL PORTB.
    
POP:
    SWAPF   STATUS_TEMP, W  
    MOVWF   STATUS		; Muevo W al registro de STATUS --> (Devuelve al banco a su esstado original)
    SWAPF   W_TEMP, F		; Swap W_TEMP
    SWAPF   W_TEMP, W		; Swap W_TEMP en W --> SE RECUPERA EL VALOR DE 'W'
    RETFIE			; W HACE 'POP' CUANDO SE LLAMA A UN RETURN, RETLW O UN RETFIE.
    
PSECT code, delta=2, abs
ORG 100h			; DEFINO POSICION 100h PARA EL CODIGO COMPLETO
;------------- CONFIGURACION ------------
MAIN:
    CALL    CONFIG_INS_OUTS	 ; LLAMO A SURUTINA DE DEFINICION DE ENTRADAS/SALIDAS DIGITALES.
    CALL    CONFIG_RELOJ	 ; LLAMO A SUBRUTINA DE CONFIGURACION DEL OSCILADOR A UTILIZAR.
    CALL    CONFIG_TMR0		 ; LLAMO A SUBRUTINA DEL TMR0.
    CALL    CONFIG_INTERRUPTIONS ; LLAMO A SUBRUTINA DE HABILITACION DE INTERRUPCIONES.
    BANKSEL PORTD		 ; ME MUEVO AL BANCO 0.
    
LOOP:
    MOVF    PORTA,W		 ; DEFINO QUE TODO LO QUE ESTÉ EN EL PORTA, PASE A 'W'.
    MOVWF   valor		 ; INDICO QUE TODO LO QUE ESTÉ AHORA EN 'W', gracias a instruccion anterior, ESTÉ AHORA EN MI VARIABLE 'VALOR'.
    CALL    SAVE_UDC		 ; GUARDO LOS VALORES EXISTENTES DE LAS UNIDADES, DECENAS Y CENTENAS EN 'SAVE_UDC'.
    CALL    SETTING_DISPLAYS		 ; PARA MOSTRAR VALORES EN HEXADECIMAL, GUARDO LOS VALORES QUE TENGO EN PORTC.
    CLRF    centena		 ; LIMPIO MI VARIABLE DE 'CENTENA' PARA EVITAR ERRORES.
    CLRF    decena		 ; LIMPIO MI VARIABLE DE 'DECENA' PARA EVITAR ERRORES.
    CLRF    unidad		 ; LIMPIO MI VARIABLE DE 'UNIDADES' PARA EVITAR ERRORES.
    GOTO    LOOP		 ; VUELVO AL LOOP
    
;-------------DEFINICION DE SUBRUTINAS---------------
CONFIG_RELOJ: //CONFIGURO FRECUENCIA DE OSCILADOR 1MHz
    BANKSEL OSCCON		; ME MUEVO AL BANCO 'OSCCON'
    BSF	    OSCCON, 0		; SCS -> 1, Activo reloj interno, encendido.
    BSF	    OSCCON, 6		; BIT 6, EN 1
    BSF	    OSCCON, 5		; BIT 5, EN 0
    BCF	    OSCCON, 4		; BIT 4, EN 0 --> BIT MENOS SIGNIFICATIVO.
    RETURN
    //USO PINES 4, 5, 6 ya que me permiten configurar la frecuencia de oscilación
    //UTILIZO RELOJ INTERNO CON UNA FRECUENCIA DE 4MHz (110).

CONFIG_TMR0:
    BANKSEL OPTION_REG		; ME CAMBIO DE BANCO AL DE 'OPTION_REG' PARA DEFINIR COMO QUIERO QUE TRABAJE EL TMR0.
    BCF	    T0CS		; BIT SET EN CERO --> ACTIVO EL TMR0 COMO TEMPORIZADOR.
    BCF	    PSA			; HABILITO Y ASIGNO EL 'VALOR' AL PRESCALER.
    BSF	    PS2
    BSF	    PS1
    BSF	    PS0			; PS<2:0> --> 111 --> UTILIZO UN PRESCALER DE 1:256.
    RESET_TMR0 217		
    RETURN 
    
 CONFIG_INS_OUTS:
    BANKSEL ANSEL
    CLRF    ANSEL		; SE DEFINEN LOS I/O DIGITALES.
    CLRF    ANSELH		; LAS COLOCAMOS EN 0, PARA QUE SEAN SALIDAS DIGITALES --> SETEO EN CERO.
    
    //SALIDA DIGITAL - BANCO A, C
    BANKSEL TRISC
    CLRF    TRISA		; PORTA DEFINIDO COMO SALIDA DIGITAL.
    CLRF    TRISC		; PORTC DEFINIDO COMO SALIDA DIGITAL.
    
    //SALIDA DIGITAL - BANCO D
    MOVLW   0xF8
    MOVWF   TRISD		; DEFINO QUE MIS PINES: RD0, RD1, RD2 SON MIS SALIDAS DIGITALES. PASO LA INFORMACIÓN A ESTAS PAR APDOER MOSTRARLA. 
    MOVLW   0xFF
    
    //ENTRADA DIGITAL - BANCO B
    MOVWF   TRISB		; PORTB DEFINIDO COMO SALIDA DIGITAL.
    BCF	    OPTION_REG,7	; HABILITO LOS PULL-UPS INTEGRADOS EN MI PORTB.
    
    MOVLW   0x03	    
    MOVWF   WPUB		; ENCIENDO EL PULLUP DEL PORTB EN 0 = ACTIVADO, EN 1 = DESACTIVADO --> WPUB = Weak Pull-up Register bit, con BSF = LO ENCIENDO EN 1.
    
    BANKSEL PORTC		; DESACTIVO/LIMPIO BANCOS.
    CLRF    PORTC		; LIMPIO EL PORTC.
    
    //APAGO PINES --> 7-SEG
    BCF	    PORTD, 0		; APAGO EL PIN RD0 --> CONEXIÓN DE MIS 7-SEG
    BCF	    PORTD, 1		; APAGO EL PIN RD1 --> CONEXIÓN DE MIS 7-SEG
    BCF	    PORTD, 2		; APAGO EL PIN RD2 --> CONEXIÓN DE MIS 7-SEG
    
    // HAGO UNA LIMPIEZA DE VARIABLES
    CLRF    flags		; LIMPIO MIS BANDERAS
    CLRF    valor		; LIMPIO VARIABLES EN GENERAL PARA EVITAR ERRORES/INICIOS ALEATORIOS.
    CLRF    PORTA		; LIMPIO PORTA.
    RETURN
    
CONFIG_INTERRUPTIONS:
    BANKSEL IOCB		
    BSF	    IOCB0		; HABILITO INTERRUPCION POR CAMBIO DE ESTADO EN --> RB0.
    BSF	    IOCB1		; HABILITO INTERRUPCION POR CAMBIO DE ESTADO EN --> RB1.
    BANKSEL INTCON
    BSF	    GIE			; HABILITO INTERRUPCIONES GLOBALES --> VITAL PARA PODER TRABAJAR CON INTERRUPCIONES.
    BSF	    T0IE		; HABILITO EL TMR0.
    BCF	    T0IF		; LIMPIO LAS BANDERAS DE INTERRUPCION DE MI TMR0.
    BCF	    RBIF		; LIMPIO LAS BANDERAS DE INTERRUPCION DE MI PORTB.
    RETURN
    
SAVE_UDC:		
    revisar_centena:
    MOVLW   100			; DEFINO QUE --> W = 100 --> VALOR DE CONTADOR DE CENTENAS.
    SUBWF   valor,W		; MUEVO LA LITERAL EN MI VARIABLE 'VALOR' A 'W' --> 'VALOR' = 'VALOR' - W = 'VALOR - 100.	    
    BTFSS   STATUS,0		; SI MI LITERAL EN 'W' ES MAYOR A 'F', SE PROCEDE A 'revisar_decena'.
    GOTO    revisar_decena	
    MOVWF   valor		; MI NUEVO VALOR EN LA VARIABLE DE 'VALOR' --> 'VALOR' = 'VALOR' - 100.
    INCF    centena		; INCREMENTO EL VALOR EN VARIABLE 'CENTENA' --> 'CENTENA' = 'CENTENA' + 1.
    GOTO    revisar_centena	; VUELVO CON GOTO A REVISAR MI VARIABLE DE CENTENA.
    
    revisar_decena:
    MOVLW   10			; DEFINO QUE --> W = 10 --> VALOR DE CONTADOR DE DECENAS.
    SUBWF   valor,W		; MUEVO LA LITERAL EN MI VARIABLE 'VALOR' A 'W' --> 'VALOR' = 'VALOR' - W = 'VALOR - 10.		    
    BTFSS   STATUS,0		; SI MI LITERAL EN 'W' ES MAYOR A 'F', SE PROCEDE A 'revisar_unidad'.
    GOTO    revisar_unidad	
    MOVWF   valor		; MI NUEVO VALOR EN LA VARIABLE DE 'VALOR' --> 'VALOR' = 'VALOR' - 10.
    INCF    decena		; INCREMENTO EL VALOR EN VARIABLE 'DECENA' --> 'DECENA' = 'DECENA' + 1.
    GOTO    revisar_decena	; VUELVO CON GOTO A REVISAR MI VARIABLE DE DECENA.	
    
    revisar_unidad:
    MOVLW   1			; DEFINO QUE --> W = 1 --> VALOR DE CONTADOR DE UNIDADES.
    SUBWF   valor,W		; MUEVO LA LITERAL EN MI VARIABLE 'VALOR' A 'W' --> 'VALOR' = 'VALOR' - W = 'VALOR - 1.		    
    BTFSS   STATUS,0		; SI MI LITERAL EN 'W' ES MAYOR A 'F', SE PROCEDE A 'revisar_unidad'.
    RETURN			; RETURN
    MOVWF   valor		; MUEVO LA LITERAL EN MI VARIABLE 'VALOR' A 'W' --> 'VALOR' = 'VALOR' - W = 'VALOR - 1.
    INCF    unidad		; INCREMENTO EL VALOR EN VARIABLE 'DECENA' --> 'UNIDAD' = 'UNIDAD' + 1.
    GOTO    revisar_unidad	; VUELVO CON GOTO A REVISAR MI VARIABLE DE UNIDAD.
    
SETTING_DISPLAYS:
    MOVF    centena, W		; MUEVO EL VALOR EN MI VARIABLE 'CENTENA' A 'W'.
    CALL    values		; BUSCO EL VALOR QUE SE VA A CARGAR EN EL PORTC, EN 'VALUES' (TABLA DE VALORES BINARIOS).
    MOVWF   display_nrep	; GUARDO EL 'CHAR' EN MI VARIABLE DE 'display_nrep'.
    
    MOVF    decena, W		; MUEVO EL VALOR EN MI VARIABLE 'DECENA' A 'W'.
    CALL    values		; BUSCO EL VALOR QUE SE VA A CARGAR EN EL PORTC, EN 'VALUES' (TABLA DE VALORES BINARIOS).
    MOVWF   display_nrep+1	; GUARDO EL 'CHAR' EN MI VARIABLE DE 'display_nrep'.
    
    MOVF    unidad, W		; MUEVO EL VALOR EN MI VARIABLE 'UNIDAD' A 'W'.
    CALL    values		; BUSCO EL VALOR QUE SE VA A CARGAR EN EL PORTC, EN 'VALUES' (TABLA DE VALORES BINARIOS).
    MOVWF   display_nrep+2	; GUARDO EL 'CHAR' EN MI VARIABLE DE 'display_nrep'.
    
    RETURN			; RETURN
    
SHOW_VALUE:
    BCF	    PORTD, 0		; APAGO EL 'display_nrep' DE MIS VALORES DE CENTENA.
    BCF	    PORTD, 1		 
    BCF	    PORTD, 2		 
    
    BTFSC   flags, 1		; SI EL BIT TEST DE 'FLAGS' = 1 CONTINUO CON LA SIGUIENTE INSTRUCCION.
    GOTO    DISPLAY_2		
    BTFSC   flags, 0		; SI EL BIT TEST DE 'FLAGS' = 0 CONTINUO VUELVO A LAS INSTRUCCIONES DE CADA DISPLAY.
    GOTO    DISPLAY1
    GOTO    DISPLAY0	
    
    DISPLAY0:			
	MOVF    display_nrep, W	; MUEVO LO QUE ESTÉ EN 'display_nrep' a 'W'.
	MOVWF   PORTC		; MUEVO LOS VALORES INCLUIDOS EN LA TABLA DE VALORES BINARIOS A PORTC.
	BSF	PORTD, 0	
	BSF	flags, 0	; CAMBIO DE BANDERA PARA MODIFICAR LA VARIABLE DE 'display_nrep'.
	BCF	flags, 1	
    RETURN

    DISPLAY1:			
	MOVF    display_nrep+1, W	; MUEVO LO QUE ESTÉ EN 'display_nrep' a 'W'.
	MOVWF   PORTC			; MUEVO LOS VALORES INCLUIDOS EN LA TABLA DE VALORES BINARIOS A PORTC.
	BSF	PORTD, 1	
	BCF	flags,0			; CAMBIO DE BANDERA PARA MODIFICAR LA VARIABLE DE 'display_nrep'.
	BSF	flags,1	
    RETURN
    
    DISPLAY_2:			
	MOVF    display_nrep+2, W	; MUEVO LO QUE ESTÉ EN 'display_nrep' a 'W'.
	MOVWF   PORTC			; MUEVO LOS VALORES INCLUIDOS EN LA TABLA DE VALORES BINARIOS A PORTC.
	BSF	PORTD, 2	
	BCF	flags, 0		; CAMBIO DE BANDERA PARA MODIFICAR LA VARIABLE DE 'display_nrep'.
	BCF	flags, 1
    RETURN
    
INTERRUPTION_TMR0:
    RESET_TMR0 217			; DEFINO UN VALOR DE DELAY PARA EL TMR0
    CALL    SHOW_VALUE			; MUESTRO LOS VALORES EN HEXADECIMAL.
    RETURN
    
INTERRUPTION_PORTB:
    BTFSS   PORTB, 0		; SI MI PUSH-BUTTON EN EL PIN 'RB0' NO ESTÁ PRESIONADO EL PORTA SE INCREMENTA, COMO ACCIÓN DEL ANTIRREBOTE PROPORCIONADO POR INTERRUPCIONES.
    INCF    PORTA
    BTFSS   PORTB, 1		; SI MI PUSH-BUTTON EN EL PIN 'RB1' NO ESTÁ PRESIONADO EL PORTA SE DECREMENTA, COMO ACCIÓN DEL ANTIRREBOTE PROPORCIONADO POR INTERRUPCIONES.
    DECF    PORTA
    BCF	    RBIF		; LIMPIO BANDERAS
    RETURN
    
    
// PONGO AQUI LA TABLA PARA EVITAR TRASLAPE CON EL RESTO DEL CODIGO    
ORG 200h
values:
    CLRF    PCLATH		; LIMPIO EL REGISTRO DE 'PCLATH'
    BSF	    PCLATH, 1		; PCLATH = LO HAGO = 01	; PCL = LO HAGO = 02
    ANDLW   0x0F		; LE INDICO QUE NO SE DEBEN SALTAR MÁS DE LOS VALORES PRESENTES EN 'VALUES'
    ADDWF   PCL			; PC = PCLATH + PCL + w
    RETLW   00111111B	; VALOR = 0
    RETLW   00000110B	; VALOR = 1
    RETLW   01011011B	; VALOR = 2
    RETLW   01001111B	; VALOR = 3
    RETLW   01100110B	; VALOR = 4
    RETLW   01101101B	; VALOR = 5
    RETLW   01111101B	; VALOR = 6
    RETLW   00000111B	; VALOR = 7
    RETLW   01111111B	; VALOR = 8
    RETLW   01101111B	; VALOR = 9
    RETLW   01110111B	; VALOR = A
    RETLW   01111100B	; VALOR = b
    RETLW   00111001B	; VALOR = C
    RETLW   01011110B	; VALOR = d
    RETLW   01111001B	; VALOR = E
    RETLW   01110001B	; VALOR = F
